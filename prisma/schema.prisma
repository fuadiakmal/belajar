// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = env("DATABASE_URL")
}

model User {
   id       String @id @default(uuid())
   name     String
   email    String @unique
   password String

   authSession AuthSession[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@map("users")
}

model AuthSession {
   id         String    @id @default(uuid())
   userId     String
   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   token      String    @db.Text
   userAgent  String?
   ip         String?
   device     String?
   platform   String?
   browser    String?
   location   String?
   expiresAt  DateTime
   lastUsedAt DateTime? @default(now())
   revoked    Boolean   @default(false)
   revokedAt  DateTime?
   note       String?
   createdAt  DateTime  @default(now())

   @@index([userId])
   @@index([expiresAt])
   @@index([createdAt])
   @@map("auth_sessions")
}

model Kategori {
   id        String   @id @default(uuid())
   nama      String   @unique
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   berita Berita[]

   @@map("kategori")
}

model Berita {
   id         String   @id @default(uuid())
   judul      String
   slug       String
   konten     String   @db.LongText
   kategori   Kategori @relation(fields: [kategoriId], references: [id], onDelete: Cascade)
   kategoriId String
   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt

   @@map("berita")
}
